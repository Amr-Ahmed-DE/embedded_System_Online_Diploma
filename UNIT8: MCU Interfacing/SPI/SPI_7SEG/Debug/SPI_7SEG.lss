
SPI_7SEG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007d8  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066e  00000000  00000000  000009e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000400  00000000  00000000  00001056  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00001458  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a9  00000000  00000000  000014e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b7  00000000  00000000  00001889  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001940  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

int main(void)
{
    unsigned char counter = 0;
    unsigned char index_display;
    SPI_MasterInit();
  6c:	0e 94 5e 00 	call	0xbc	; 0xbc <SPI_MasterInit>
    MAX_execute(0x09, 0xFF);
  70:	6f ef       	ldi	r22, 0xFF	; 255
  72:	89 e0       	ldi	r24, 0x09	; 9
  74:	0e 94 69 00 	call	0xd2	; 0xd2 <MAX_execute>
    MAX_execute(0x0A, 0xFF);
  78:	6f ef       	ldi	r22, 0xFF	; 255
  7a:	8a e0       	ldi	r24, 0x0A	; 10
  7c:	0e 94 69 00 	call	0xd2	; 0xd2 <MAX_execute>
    MAX_execute(0x0B, 0xF7); //scan limit register format B :: 0xX7
  80:	67 ef       	ldi	r22, 0xF7	; 247
  82:	8b e0       	ldi	r24, 0x0B	; 11
  84:	0e 94 69 00 	call	0xd2	; 0xd2 <MAX_execute>
    MAX_execute(0x0C, 0x01);
  88:	61 e0       	ldi	r22, 0x01	; 1
  8a:	8c e0       	ldi	r24, 0x0C	; 12
  8c:	0e 94 69 00 	call	0xd2	; 0xd2 <MAX_execute>
#include <avr/io.h>
#include "MCAL/SPI_DRIVER/SPI.h"

int main(void)
{
    unsigned char counter = 0;
  90:	60 e0       	ldi	r22, 0x00	; 0
    MAX_execute(0x0A, 0xFF);
    MAX_execute(0x0B, 0xF7); //scan limit register format B :: 0xX7
    MAX_execute(0x0C, 0x01);
    while (1)
    {
	    for (index_display = 1; index_display < 9; index_display++)
  92:	c1 e0       	ldi	r28, 0x01	; 1
  94:	07 c0       	rjmp	.+14     	; 0xa4 <main+0x38>
	    MAX_execute(index_display, counter++);
  96:	d1 e0       	ldi	r29, 0x01	; 1
  98:	d6 0f       	add	r29, r22
  9a:	8c 2f       	mov	r24, r28
  9c:	0e 94 69 00 	call	0xd2	; 0xd2 <MAX_execute>
    MAX_execute(0x0A, 0xFF);
    MAX_execute(0x0B, 0xF7); //scan limit register format B :: 0xX7
    MAX_execute(0x0C, 0x01);
    while (1)
    {
	    for (index_display = 1; index_display < 9; index_display++)
  a0:	cf 5f       	subi	r28, 0xFF	; 255
	    MAX_execute(index_display, counter++);
  a2:	6d 2f       	mov	r22, r29
    MAX_execute(0x0A, 0xFF);
    MAX_execute(0x0B, 0xF7); //scan limit register format B :: 0xX7
    MAX_execute(0x0C, 0x01);
    while (1)
    {
	    for (index_display = 1; index_display < 9; index_display++)
  a4:	c9 30       	cpi	r28, 0x09	; 9
  a6:	b8 f3       	brcs	.-18     	; 0x96 <main+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	2f e3       	ldi	r18, 0x3F	; 63
  aa:	8d e0       	ldi	r24, 0x0D	; 13
  ac:	93 e0       	ldi	r25, 0x03	; 3
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	80 40       	sbci	r24, 0x00	; 0
  b2:	90 40       	sbci	r25, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x42>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x4c>
  b8:	00 00       	nop
  ba:	eb cf       	rjmp	.-42     	; 0x92 <main+0x26>

000000bc <SPI_MasterInit>:
	/* Start transmission */
	SPI_SPDR = cData;
	/* Wait for transmission complete */
	while(!(SPI_SPSR & (1<<SPIF)));
	return SPI_SPDR;
}
  bc:	87 b3       	in	r24, 0x17	; 23
  be:	80 6b       	ori	r24, 0xB0	; 176
  c0:	87 bb       	out	0x17, r24	; 23
  c2:	87 b3       	in	r24, 0x17	; 23
  c4:	8f 7b       	andi	r24, 0xBF	; 191
  c6:	87 bb       	out	0x17, r24	; 23
  c8:	81 e5       	ldi	r24, 0x51	; 81
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	9e b9       	out	0x0e, r25	; 14
  ce:	8d b9       	out	0x0d, r24	; 13
  d0:	08 95       	ret

000000d2 <MAX_execute>:

//sent to MAX7221
void MAX_execute(unsigned char cmd, unsigned char data)
{
	PORTB &= ~(1 << SS);
  d2:	98 b3       	in	r25, 0x18	; 24
  d4:	9f 7e       	andi	r25, 0xEF	; 239
  d6:	98 bb       	out	0x18, r25	; 24
	SPDR = cmd;
  d8:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1 << SPIF)));			//check if not zero
  da:	77 9b       	sbis	0x0e, 7	; 14
  dc:	fe cf       	rjmp	.-4      	; 0xda <MAX_execute+0x8>
	SPDR = data;
  de:	6f b9       	out	0x0f, r22	; 15
	while (!(SPSR & (1 << SPIF)));
  e0:	77 9b       	sbis	0x0e, 7	; 14
  e2:	fe cf       	rjmp	.-4      	; 0xe0 <MAX_execute+0xe>
	PORTB |= (1 << SS);
  e4:	88 b3       	in	r24, 0x18	; 24
  e6:	80 61       	ori	r24, 0x10	; 16
  e8:	88 bb       	out	0x18, r24	; 24
  ea:	08 95       	ret

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>
