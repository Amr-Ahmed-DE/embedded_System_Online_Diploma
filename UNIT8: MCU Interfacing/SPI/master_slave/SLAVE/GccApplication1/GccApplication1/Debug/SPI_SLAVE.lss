
SPI_SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a9  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005c7  00000000  00000000  00000879  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c7  00000000  00000000  00000e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001108  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000357  00000000  00000000  00001180  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000062  00000000  00000000  000014d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001539  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define F_CPU 1000000UL 

int main(void)
{
	unsigned char DATA = 255;
	IO_DDRA = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	9b bb       	out	0x1b, r25	; 27
  72:	8a bb       	out	0x1a, r24	; 26
	SPI_SlaveInit();
  74:	0e 94 45 00 	call	0x8a	; 0x8a <SPI_SlaveInit>
	for (DATA = 255; DATA >= 0; DATA--)
  78:	cf ef       	ldi	r28, 0xFF	; 255
	{
		IO_PORTA = SPI_SlaveRecieve(DATA);
  7a:	8c 2f       	mov	r24, r28
  7c:	0e 94 50 00 	call	0xa0	; 0xa0 <SPI_SlaveRecieve>
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	9c bb       	out	0x1c, r25	; 28
  84:	8b bb       	out	0x1b, r24	; 27
int main(void)
{
	unsigned char DATA = 255;
	IO_DDRA = 0xFF;
	SPI_SlaveInit();
	for (DATA = 255; DATA >= 0; DATA--)
  86:	c1 50       	subi	r28, 0x01	; 1
  88:	f8 cf       	rjmp	.-16     	; 0x7a <main+0xe>

0000008a <SPI_SlaveInit>:
}

void SPI_SlaveInit(void)
{
	/* Set MISO output */
	DDRB |= (1<<MISO);
  8a:	87 b3       	in	r24, 0x17	; 23
  8c:	80 64       	ori	r24, 0x40	; 64
  8e:	87 bb       	out	0x17, r24	; 23
	/* Set MOSI, SCK and SS input*/
	DDRB &= ~(1<<MOSI) & ~(1<<SCK) & ~(1<<SS);
  90:	87 b3       	in	r24, 0x17	; 23
  92:	8f 74       	andi	r24, 0x4F	; 79
  94:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Slave, set clock rate fck/16 */
	SPI_SPCR = (1<<SPE);
  96:	80 e4       	ldi	r24, 0x40	; 64
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	9e b9       	out	0x0e, r25	; 14
  9c:	8d b9       	out	0x0d, r24	; 13
  9e:	08 95       	ret

000000a0 <SPI_SlaveRecieve>:
}
unsigned char SPI_SlaveRecieve(unsigned char cData)
{
	/* Start transmission */
	SPI_SPDR = cData;
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	90 bb       	out	0x10, r25	; 16
  a4:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPI_SPSR & (1<<SPIF)));
  a6:	8e b1       	in	r24, 0x0e	; 14
  a8:	9f b1       	in	r25, 0x0f	; 15
  aa:	87 ff       	sbrs	r24, 7
  ac:	fc cf       	rjmp	.-8      	; 0xa6 <SPI_SlaveRecieve+0x6>
	return SPI_SPDR;
  ae:	8f b1       	in	r24, 0x0f	; 15
  b0:	90 b3       	in	r25, 0x10	; 16
}
  b2:	08 95       	ret

000000b4 <_exit>:
  b4:	f8 94       	cli

000000b6 <__stop_program>:
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <__stop_program>
